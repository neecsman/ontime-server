import crypto from "crypto-js";
import { generate } from "shortid";
import bcrypt from "bcrypt";
import { v4 } from "uuid";
import { Orders, Users } from "../entity";
import baseQuery from "../API/axios";
import {
  ErrorService,
  TokenService,
  PaymentService,
  MailService,
  DostavistaService,
} from "../service";
import { AppDataSource } from "../data-source";
import IOrder from "../interface/IOrder";
import { IPaymentRequest } from "../interface";
import { UserDto } from "../dto";

class OrderService {
  async getOrders(refreshToken: string) {
    if (!refreshToken) {
      throw ErrorService.UnauthorizedError();
    }

    const tokenService = new TokenService();
    const userData = tokenService.validateRefreshToken(refreshToken);
    console.log(userData);

    if (!userData) {
      throw ErrorService.UnauthorizedError();
    }

    const orders = await AppDataSource.getRepository(Orders)
      .createQueryBuilder("orders")
      .where("orders.userId = :id", { id: userData.id })
      .orderBy("created_datetime", "DESC")
      .getMany();

    const dostavistaOrderID: any = [];

    orders.forEach((item) => {
      if (item.dostavista_order_id) {
        dostavistaOrderID.push(item.dostavista_order_id);
      }
    });

    if (dostavistaOrderID.length) {
      const dostavistaOrders = await baseQuery.get("orders", {
        params: { order_id: dostavistaOrderID },
      });

      if (dostavistaOrders) {
        dostavistaOrders.data.orders.forEach(async (item: any) => {
          const order = await AppDataSource.getRepository(Orders).findOneBy({
            dostavista_order_id: item.order_id,
          });

          if (!order) {
            return;
          }
          order.dostavista_order_status = item.status;
          AppDataSource.getRepository(Orders).save(order);
        });
      }
    }

    return orders;
  }

  async createOrderWithCard(data: IOrder, userIP: string) {
    const validate = (e: any) => /^((\+7|7|8)+([9-9])+([0-9]){9})$/i.test(e);

    if (!validate(data.phone_from)) {
      throw ErrorService.BadRequest(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è... ü•≤"
      );
    }

    if (!validate(data.phone_where)) {
      throw ErrorService.BadRequest(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è... ü•≤"
      );
    }

    console.log("–ü–æ–ø–∞–ª–∏ –≤ —Å–µ—Ä–≤–∏—Å");

    try {
      //–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const candidate = await AppDataSource.getRepository(Users).findOneBy({
        email: data.email,
      });

      if (candidate) {
        //—Å–æ–∑–¥–∞–µ–º–∑–∞–∫–∞–∑
        const orderRep = AppDataSource.getRepository(Orders);
        const order = orderRep.create(data);
        order.userId = candidate.id;
        const savedOrder = await orderRep.save(order);

        const paymentService = new PaymentService();
        const paymentResponse = await paymentService.payment(
          savedOrder.id,
          userIP
        ); // –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç —Å redirect 3DS

        console.log("–û—Ç–≤–µ—Ç –æ—Ç connpay", paymentResponse);

        const userDto = new UserDto(candidate);

        return {
          data: paymentResponse,
          refreshToken: null,
          accessToken: null,
          user: userDto,
        };
      }

      if (!candidate) {
        console.log("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        const newPassword = generate();
        const hashPassword = await bcrypt.hash(newPassword, 3);
        const confirmLink = v4();

        const user = new Users();
        user.email = data.email;
        user.password = hashPassword;
        user.confirmLink = confirmLink;
        user.phone = data.customer_phone;
        user.firstname = data.customer_firstname;
        user.lastname = data.customer_lastname;
        user.middlename = data.customer_middlename;

        const newUser = await AppDataSource.manager.save(user);

        console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º email");
        await MailService.sendRegistrationMail(data.email, newPassword);

        console.log("–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

        const orderRep = AppDataSource.getRepository(Orders);
        const order = orderRep.create(data);
        order.userId = newUser.id;
        const savedOrder = await orderRep.save(order);

        console.log("–°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã");

        const userDto = new UserDto(newUser);
        const tokenService = new TokenService();
        const tokens = tokenService.generateToken({ ...userDto });

        await tokenService.saveToken(userDto.id, tokens.refreshToken);

        console.log("–°–æ–∑–¥–µ–º —Ö—ç—à –æ–ø–ª–∞—Ç—ã");
        const paymentService = new PaymentService();

        const paymentResponse = await paymentService.payment(
          savedOrder.id,
          userIP
        );

        console.log("–ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç connpay", paymentResponse);

        return { ...tokens, data: paymentResponse, user: userDto };
      }
    } catch (error) {
      console.log(error);
    }
  }

  async createOrderWithCash(data: IOrder) {
    const validate = (e: any) => /^((\+7|7|8)+([9-9])+([0-9]){9})$/i.test(e);

    if (!validate(data.phone_from)) {
      throw ErrorService.BadRequest(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è... ü•≤"
      );
    }

    if (!validate(data.phone_where)) {
      throw ErrorService.BadRequest(
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è... ü•≤"
      );
    }

    try {
      //–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const candidate = await AppDataSource.getRepository(Users).findOneBy({
        email: data.email,
      });

      if (!candidate) {
        //–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        console.log("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç");

        //–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newPassword = generate();
        const hashPassword = await bcrypt.hash(newPassword, 3);
        const confirmLink = v4();

        const user = new Users();
        user.email = data.email;
        user.password = hashPassword;
        user.confirmLink = confirmLink;
        user.phone = data.customer_phone;
        user.firstname = data.customer_firstname;
        user.lastname = data.customer_lastname;
        user.middlename = data.customer_middlename;

        console.log("–°–æ–∑–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", user);

        const newUser = await AppDataSource.manager.save(user);
        await MailService.sendRegistrationMail(data.email, newPassword);

        //–°–æ–∑–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        const userDto = new UserDto(newUser);
        const tokenService = new TokenService();
        const tokens = tokenService.generateToken({ ...userDto });

        console.log("–°–æ–∑–¥–∞–ª–∏ —Ç–æ–∫–µ–Ω—ã", tokens);

        //—Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã –≤ –ë–î
        await tokenService.saveToken(userDto.id, tokens.refreshToken);

        // –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞ email

        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const orderRep = AppDataSource.getRepository(Orders);
        const order = orderRep.create(data);
        order.userId = newUser.id;
        const savedOrder = await orderRep.save(order);
        console.log("–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∑–∞–∫–∞–∑", savedOrder);

        const dostavistaService = new DostavistaService();
        const dostavistaOrder = await dostavistaService.newOrder(savedOrder);

        //–í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç —Ç–æ–∫–µ–Ω –∏ –∑–∞–∫–∞–∑
        return { ...tokens, data: savedOrder, user: userDto };
      }

      console.log("–ï—Å—Ç—å —Ç–∞–∫–æ–π —á–µ–ª");
      //—Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const orderRep = AppDataSource.getRepository(Orders);
      const order = orderRep.create(data);
      order.userId = candidate.id;
      const savedOrder = await orderRep.save(order);

      //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –¥–æ—Å—Ç–∞–≤–∏—Å—Ç—É
      const dostavistaService = new DostavistaService();
      const dostavistaOrder = await dostavistaService.newOrder(savedOrder);

      const userDto = new UserDto(candidate);

      //–¢–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω –ø–æ—Å–∫–æ–ª—å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∏ —Ç–æ–∫–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è —É –Ω–µ–≥–æ –≤ –ª–æ–∫–∞–ª–µ

      return {
        order: savedOrder,
        user: userDto,
        accessToken: null,
        refreshToken: null,
      };
    } catch (error) {
      console.log(error);
    }
  }

  async calcOrder(order: IOrder) {
    const orderInfo = {
      vehicle_type_id: order.how_delivery,
      matter: order.object,
      insurance_amount: order.object_price,
      total_weight_kg: order.total_weight,
      points: [
        {
          address: order.adress_from,
          contact_person: { phone: order.phone_from },
          required_start_datetime: order.start_time || null,
        },
        {
          address: order.adress_where,
          contact_person: { phone: order.phone_where },
          required_start_datetime: order.end_time || null,
        },
      ],
    };

    const data = await baseQuery.post("/calculate-order", orderInfo);
    return data.data;
  }

  async cancelOrder(id: number) {
    const order = await AppDataSource.getRepository(Orders).findOneBy({
      id,
    });

    if (!order) {
      throw ErrorService.BadRequest("–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...");
    }
    if (order.dostavista_order_id) {
      const data = await baseQuery.post("/cancel-order", {
        order_id: order.dostavista_order_id,
      });
      order.dostavista_order_status = "canceled";
      await AppDataSource.getRepository(Orders).save(order);
      return data.data;
    }

    order.dostavista_order_status = "canceled";
    await AppDataSource.getRepository(Orders).save(order);
    return order;
  }

  async getStatus(id: any) {
    const order = await AppDataSource.getRepository(Orders).findOneBy({ id });
    if (!order) {
      throw ErrorService.BadRequest("–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    return order;
  }
}

export default OrderService;
